# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Domain Battle CI - Linters & Tests

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - "develop"
      - "main"

jobs:
  build:
    name: "Building"
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.11"]
        poetry-version: ["1.4.0"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Load cached Poetry cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}

    - name: Load cached Poetry packages
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ matrix.poetry-version }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root
    
    - name: Check importation style with isort
      run: poetry run isort --check-only domain/

    - name: Check style with black
      run: poetry run black --check domain/
    
    - name: Check typing with mypy
      run: |
        if [ ! -d ".mypy_cache" ]; then
          mkdir .mypy_cache
        fi
        poetry run mypy domain/ --install-types --non-interactive --show-error-codes

    - name: Run lint with pylint
      run: poetry run pylint domain/

    - name: Test with pytest
      run: pytest -s -l -vvv domain/ --cov domain/ --cov-fail-under=95 --cov-report term:skip-covered
